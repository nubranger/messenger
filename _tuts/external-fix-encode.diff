diff --git a/src/Messenger/ExternalJsonMessageSerializer.php b/src/Messenger/ExternalJsonMessageSerializer.php
index 8c63478..c8036d9 100644
--- a/src/Messenger/ExternalJsonMessageSerializer.php
+++ b/src/Messenger/ExternalJsonMessageSerializer.php
@@ -17,11 +17,40 @@ class ExternalJsonMessageSerializer implements SerializerInterface
         $data = json_decode($body, true);
         $message = new LogEmoji($data['emoji']);
 
-        return new Envelope($message);
+        // in case of redelivery, unserialize any stamps
+        $stamps = [];
+        if (isset($headers['stamps'])) {
+            $stamps = unserialize($headers['stamps']);
+        }
+
+        return new Envelope($message, $stamps);
     }
 
     public function encode(Envelope $envelope): array
     {
-        throw new \Exception('Transport & serializer not meant for sending messages');
+        // this is called if a message is redelivered for "retry"
+        $message = $envelope->getMessage();
+
+        // expand this logic later if you handle more than
+        // just one message class
+        if ($message instanceof LogEmoji) {
+            // recreate what the data originally looked like
+            $data = ['emoji' => $message->getEmojiIndex()];
+        } else {
+            throw new \Exception('Unsupported message class');
+        }
+
+        $allStamps = [];
+        foreach ($envelope->all() as $stamps) {
+            $allStamps = array_merge($allStamps, $stamps);
+        }
+
+        return [
+            'body' => json_encode($data),
+            'headers' => [
+                // store stamps as a header - to be read in decode()
+                'stamps' => serialize($allStamps)
+            ],
+        ];
     }
 }
