diff --git a/src/Messenger/ExternalJsonMessageSerializer.php b/src/Messenger/ExternalJsonMessageSerializer.php
index 7edf6e7..6cf1eca 100644
--- a/src/Messenger/ExternalJsonMessageSerializer.php
+++ b/src/Messenger/ExternalJsonMessageSerializer.php
@@ -21,21 +21,14 @@ class ExternalJsonMessageSerializer implements SerializerInterface
             throw new MessageDecodingFailedException('Invalid JSON');
         }
 
-        if (!isset($data['emoji'])) {
-            throw new MessageDecodingFailedException('Missing the emoji key!');
-        }
-        $message = new LogEmoji($data['emoji']);
+        $envelope = $this->createLogEmojiEnvelope($data);
 
         // in case of redelivery, unserialize any stamps
         $stamps = [];
         if (isset($headers['stamps'])) {
             $stamps = unserialize($headers['stamps']);
         }
-
-        $envelope = new Envelope($message, $stamps);
-
-        // needed only if you need this to be sent through the non-default bus
-        $envelope = $envelope->with(new BusNameStamp('command.bus'));
+        $envelope = $envelope->with(... $stamps);
 
         return $envelope;
     }
@@ -67,4 +60,19 @@ class ExternalJsonMessageSerializer implements SerializerInterface
             ],
         ];
     }
+
+    private function createLogEmojiEnvelope($data): Envelope
+    {
+        if (!isset($data['emoji'])) {
+            throw new MessageDecodingFailedException('Missing the emoji key!');
+        }
+        $message = new LogEmoji($data['emoji']);
+
+        $envelope = new Envelope($message);
+
+        // needed only if you need this to be sent through the non-default bus
+        $envelope = $envelope->with(new BusNameStamp('command.bus'));
+
+        return $envelope;
+    }
 }
