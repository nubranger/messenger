diff --git a/config/services.yaml b/config/services.yaml
index ef2ac04..5e6ccbc 100644
--- a/config/services.yaml
+++ b/config/services.yaml
@@ -13,6 +13,7 @@ services:
         bind:
             # keep in sync with flysystem.yaml settings
             $publicAssetBaseUrl: '/uploads/images'
+            $messengerAuditLogger: '@monolog.logger.messenger_audit'
 
     # makes classes in src/ available to be used as services
     # this creates a service per class whose id is the fully-qualified class name
diff --git a/src/Messenger/AuditMiddleware.php b/src/Messenger/AuditMiddleware.php
index 1b0ba97..78be984 100644
--- a/src/Messenger/AuditMiddleware.php
+++ b/src/Messenger/AuditMiddleware.php
@@ -2,12 +2,21 @@
 
 namespace App\Messenger;
 
+use Psr\Log\LoggerInterface;
 use Symfony\Component\Messenger\Envelope;
 use Symfony\Component\Messenger\Middleware\MiddlewareInterface;
 use Symfony\Component\Messenger\Middleware\StackInterface;
+use Symfony\Component\Messenger\Stamp\ReceivedStamp;
 
 class AuditMiddleware implements MiddlewareInterface
 {
+    private $logger;
+
+    public function __construct(LoggerInterface $messengerAuditLogger)
+    {
+        $this->logger = $messengerAuditLogger;
+    }
+
     public function handle(Envelope $envelope, StackInterface $stack): Envelope
     {
         if (null === $envelope->last(UniqueIdStamp::class)) {
@@ -16,7 +25,16 @@ class AuditMiddleware implements MiddlewareInterface
 
         /** @var UniqueIdStamp $stamp */
         $stamp = $envelope->last(UniqueIdStamp::class);
-        dump($stamp->getUniqueId());
+
+        $context = [
+            'id' => $stamp->getUniqueId(),
+            'class' => get_class($envelope->getMessage())
+        ];
+        if ($envelope->last(ReceivedStamp::class)) {
+            $this->logger->info('[{id}] Received & handling {class}', $context);
+        } else {
+            $this->logger->info('[{id}] Handling or sending {class}', $context);
+        }
 
         return $stack->next()->handle($envelope, $stack);
     }
