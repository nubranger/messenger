diff --git a/src/Messenger/ExternalJsonMessageSerializer.php b/src/Messenger/ExternalJsonMessageSerializer.php
index 5796ceb..231f9a9 100644
--- a/src/Messenger/ExternalJsonMessageSerializer.php
+++ b/src/Messenger/ExternalJsonMessageSerializer.php
@@ -21,7 +21,18 @@ class ExternalJsonMessageSerializer implements SerializerInterface
             throw new MessageDecodingFailedException('Invalid JSON');
         }
 
-        $envelope = $this->createLogEmojiEnvelope($data);
+        if (!isset($headers['type'])) {
+            throw new MessageDecodingFailedException('Missing "type" header');
+        }
+
+        switch ($headers['type']) {
+            case 'emoji':
+                $envelope = $this->createLogEmojiEnvelope($data);
+                break;
+            default:
+                throw new MessageDecodingFailedException(sprintf('Invalid type "%s"', $headers['type']));
+        }
+
 
         // in case of redelivery, unserialize any stamps
         $stamps = [];
@@ -43,6 +54,7 @@ class ExternalJsonMessageSerializer implements SerializerInterface
         if ($message instanceof LogEmoji) {
             // recreate what the data originally looked like
             $data = ['emoji' => $message->getEmojiIndex()];
+            $type = 'emoji';
         } else {
             throw new \Exception('Unsupported message class');
         }
@@ -56,7 +68,8 @@ class ExternalJsonMessageSerializer implements SerializerInterface
             'body' => json_encode($data),
             'headers' => [
                 // store stamps as a header - to be read in decode()
-                'stamps' => serialize($allStamps)
+                'stamps' => serialize($allStamps),
+                'type' => $type,
             ],
         ];
     }
